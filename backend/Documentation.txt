## Prerequisites

Before you begin, ensure you have the following installed:
- Node.js (v14 or higher)
- npm (comes with Node.js)
- MySQL (v5.7 or higher)
- Git (optional)

## Step 1: Clone or Download the Project

### Option A: Clone with Git

git clone https://github.com/Mr-A12k/BPO_Project.git
cd BPO_Project
cd backend


### Option B: Download Manually
1. Download the project ZIP file
2. Extract it and navigate to the backend folder in your terminal

## Step 2: Install Dependencies


npm install


This will install all required packages listed in package.json:
- express
- mysql2
- sequelize
- jsonwebtoken
- bcryptjs
- dotenv
- cors
- body-parser
- natural (for sentiment analysis)

## Step 3: Database Setup

### 1. Create MySQL Database

mysql -u root -p


Then run these SQL commands:

CREATE DATABASE bpo_management;
CREATE USER 'kabix'@'localhost' IDENTIFIED BY 'Kabix';
GRANT ALL PRIVILEGES ON bpo_management.* TO 'kabix'@'localhost';
FLUSH PRIVILEGES;
EXIT;


### 2. Configure Database Connection
Create a `.env` file in the backend folder:


touch .env


Add these configurations (adjust values as needed):

# Database Configuration
DB_HOST=kabixxii
DB_PORT=3306
DB_NAME=bpo_management
DB_USER=kabix
DB_PASSWORD=Kabix

# Authentication
JWT_SECRET=your_very_strong_secret_key_here
JWT_EXPIRES_IN=24h

# Server
PORT=5000
NODE_ENV=development

## Step 4: Database Migration

Run the Sequelize migrations to create tables:


npx sequelize-cli db:migrate


To seed initial data (optional):

npx sequelize-cli db:seed:all


## Step 5: Start the Server

### Development Mode (with nodemon)

npm run dev


### Production Mode

npm start


You should see output similar to:

Server is running on port 5000
Database connected


## Step 6: Verify Installation

### 1. Check API Status

curl http://localhost:5000/api/status

Expected response:

{"status":"OK","message":"BPO Management API is running"}


### 2. Test Authentication
Register a test user:

curl -X POST http://localhost:5000/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "firstName": "Arun",
    "lastName": "Kabil",
    "email": "kabixxii@gmail.com",
    "password": "admin123",
    "role": "admin"
  }'
```

Then login:

curl -X POST http://localhost:5000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "kabixxii@gmail.com",
    "password": "admin123"
  }'


## API Endpoints

Here are the main API endpoints:

| Endpoint                | Method | Description                     | Auth Required |
|-------------------------|--------|---------------------------------|---------------|
| /api/auth/register      | POST   | Register new user               | No            |
| /api/auth/login         | POST   | Login user                      | No            |
| /api/employees          | GET    | Get all employees               | Yes (Admin)   |
| /api/employees          | POST   | Create new employee             | Yes (Admin)   |
| /api/calls              | GET    | Get all calls                   | Yes           |
| /api/calls              | POST   | Create new call record          | Yes           |
| /api/clients            | GET    | Get all clients                 | Yes           |
| /api/clients            | POST   | Create new client               | Yes (Admin)   |
| /api/tasks              | GET    | Get all tasks                   | Yes           |
| /api/tasks              | POST   | Create new task                 | Yes           |
| /api/payrolls           | GET    | Get payroll records             | Yes (Admin)   |

## Environment Configuration

The backend supports different environments. Create these additional files as needed:

1. `.env.development` - Development environment variables
2. `.env.test` - Test environment variables
3. `.env.production` - Production environment variables

The system will automatically load the appropriate file based on NODE_ENV.

## Deployment Options

### 1. PM2 (Recommended for Production)

Install PM2 globally:

npm install -g pm2


Start the server with PM2:

NODE_ENV=production pm2 start server.js --name bpo-backend


Save the process list:

pm2 save


Set up startup script (Linux):

pm2 startup


### 2. Docker

Create a `Dockerfile` in the backend folder:

FROM node:14-alpine

WORKDIR /app

COPY package*.json ./
RUN npm install --production

COPY . .

EXPOSE 5000

CMD ["npm", "start"]


Build and run:

docker build -t bpo-backend .
docker run -p 5000:5000 -d bpo-backend


## Maintenance

### Database Backups

mysqldump -u bpo_admin -p bpo_management > bpo_backup_$(date +%Y-%m-%d).sql


### Logs
Logs are stored in the `logs/` directory by default. For PM2:

pm2 logs bpo-backend


## Troubleshooting

1. **Database Connection Issues**:
   - Verify MySQL service is running
   - Check `.env` file credentials
   - Test connection with: `mysql -u bpo_admin -p bpo_management`

2. **Port Already in Use**:
   - Find and kill the process: `lsof -i :5000` then `kill -9 <PID>`
   - Or change PORT in `.env`

3. **JWT Errors**:
   - Ensure JWT_SECRET in `.env` is consistent
   - Verify token is being sent in headers: `x-access-token`

4. **Sequelize Validation Errors**:
   - Check your request payload matches model definitions
   - Verify required fields are being sent

For additional help, check the logs in `logs/app.log` or your console output.