## 1. Database Creation

First, create the database and user:


-- Create the database
CREATE DATABASE IF NOT EXISTS bpo_management;

-- Create a dedicated user (replace 'password' with a strong password)
CREATE USER IF NOT EXISTS 'kabix'@'localhost' IDENTIFIED BY 'password';

-- Grant privileges
GRANT ALL PRIVILEGES ON bpo_management.* TO 'kabix'@'localhost';

-- Apply privileges
FLUSH PRIVILEGES;

-- Switch to the new database
USE bpo_management;


## 2. Tables Creation

Now create all the tables with their relationships:


-- Employees Table
CREATE TABLE IF NOT EXISTS employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'supervisor', 'agent') NOT NULL DEFAULT 'agent',
    phone VARCHAR(20),
    hire_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    status ENUM('active', 'inactive', 'on_leave') NOT NULL DEFAULT 'active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_email (email),
    INDEX idx_role (role),
    INDEX idx_status (status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Clients Table
CREATE TABLE IF NOT EXISTS clients (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    phone VARCHAR(20),
    address TEXT,
    contract_start DATE,
    contract_end DATE,
    status ENUM('active', 'inactive', 'pending') NOT NULL DEFAULT 'active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_email (email),
    INDEX idx_status (status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Calls Table
CREATE TABLE IF NOT EXISTS calls (
    id INT AUTO_INCREMENT PRIMARY KEY,
    client_id INT NOT NULL,
    agent_id INT NOT NULL,
    start_time DATETIME NOT NULL,
    end_time DATETIME,
    duration INT COMMENT 'Duration in seconds',
    type ENUM('inbound', 'outbound') NOT NULL,
    status ENUM('completed', 'missed', 'voicemail', 'transferred') NOT NULL DEFAULT 'completed',
    notes TEXT,
    sentiment_score FLOAT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (client_id) REFERENCES clients(id) ON DELETE CASCADE,
    FOREIGN KEY (agent_id) REFERENCES employees(id) ON DELETE CASCADE,
    INDEX idx_client (client_id),
    INDEX idx_agent (agent_id),
    INDEX idx_type (type),
    INDEX idx_status (status),
    INDEX idx_time (start_time)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Tasks Table
CREATE TABLE IF NOT EXISTS tasks (
    id INT AUTO_INCREMENT PRIMARY KEY,
    client_id INT,
    assigned_to INT NOT NULL,
    title VARCHAR(100) NOT NULL,
    description TEXT,
    due_date DATETIME,
    priority ENUM('low', 'medium', 'high') NOT NULL DEFAULT 'medium',
    status ENUM('pending', 'in_progress', 'completed', 'overdue') NOT NULL DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    completed_at DATETIME,
    FOREIGN KEY (client_id) REFERENCES clients(id) ON DELETE SET NULL,
    FOREIGN KEY (assigned_to) REFERENCES employees(id) ON DELETE CASCADE,
    INDEX idx_client (client_id),
    INDEX idx_assigned (assigned_to),
    INDEX idx_priority (priority),
    INDEX idx_status (status),
    INDEX idx_due_date (due_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Payroll Table
CREATE TABLE IF NOT EXISTS payroll (
    id INT AUTO_INCREMENT PRIMARY KEY,
    employee_id INT NOT NULL,
    pay_period_start DATE NOT NULL,
    pay_period_end DATE NOT NULL,
    hours_worked FLOAT NOT NULL,
    base_salary DECIMAL(10, 2) NOT NULL,
    bonuses DECIMAL(10, 2) DEFAULT 0.00,
    deductions DECIMAL(10, 2) DEFAULT 0.00,
    net_pay DECIMAL(10, 2) NOT NULL,
    status ENUM('pending', 'processed', 'paid') NOT NULL DEFAULT 'pending',
    payment_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (employee_id) REFERENCES employees(id) ON DELETE CASCADE,
    INDEX idx_employee (employee_id),
    INDEX idx_period (pay_period_start, pay_period_end),
    INDEX idx_status (status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Audit Log Table (for tracking changes)
CREATE TABLE IF NOT EXISTS audit_log (
    id INT AUTO_INCREMENT PRIMARY KEY,
    table_name VARCHAR(50) NOT NULL,
    record_id INT NOT NULL,
    action ENUM('create', 'update', 'delete') NOT NULL,
    old_values JSON,
    new_values JSON,
    changed_by INT NOT NULL,
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (changed_by) REFERENCES employees(id) ON DELETE CASCADE,
    INDEX idx_table (table_name),
    INDEX idx_record (record_id),
    INDEX idx_action (action),
    INDEX idx_changed_at (changed_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;


## 3. Initial Data Setup (Optional)

Here's some sample data to get you started:


-- Insert initial admin user
INSERT INTO employees (first_name, last_name, email, password, role)
VALUES (
    'Kabix',
    'Kabix',
    'arunkapilm@gmail.com',
    '$2a$10$N9qo8uLOickgx2ZMRZoMy.MrYV5Z6L1X5zW3d3J5J5v6b1JQ1YQ2K', -- password is "admin123"
    'admin'
);

-- Insert sample client
INSERT INTO clients (name, email, phone, contract_start, contract_end)
VALUES (
    'ABC Corporation',
    'contact@abccorp.com',
    '+1234567890',
    CURDATE(),
    DATE_ADD(CURDATE(), INTERVAL 1 YEAR)
);

-- Insert sample agent
INSERT INTO employees (first_name, last_name, email, password, role)
VALUES (
    'Arun',
    'Kabil',
    'kabixxii@gmail.com',
    '$2a$10$N9qo8uLOickgx2ZMRZoMy.MrYV5Z6L1X5zW3d3J5J5v6b1JQ1YQ2K', -- password is "admin123"
    'agent'
);


## 4. Database Maintenance Scripts

Here are some useful maintenance scripts:


-- Create a view for active employees
CREATE VIEW active_employees AS
SELECT id, CONCAT(first_name, ' ', last_name) AS full_name, email, role
FROM employees
WHERE status = 'active';

-- Create a stored procedure for payroll calculation
DELIMITER //
CREATE PROCEDURE calculate_payroll(IN emp_id INT, IN period_start DATE, IN period_end DATE)
BEGIN
    DECLARE total_hours FLOAT;
    DECLARE base_salary DECIMAL(10,2);
    DECLARE bonuses DECIMAL(10,2);
    
    -- Calculate total hours worked (simplified example)
    SELECT SUM(hours_worked) INTO total_hours 
    FROM employee_timesheets 
    WHERE employee_id = emp_id 
    AND work_date BETWEEN period_start AND period_end;
    
    -- Get base salary
    SELECT salary INTO base_salary FROM employees WHERE id = emp_id;
    
    -- Calculate bonuses (example logic)
    SET bonuses = (SELECT COUNT(*) FROM tasks 
                  WHERE assigned_to = emp_id 
                  AND status = 'completed'
                  AND completed_at BETWEEN period_start AND period_end) * 10;
    
    -- Insert payroll record
    INSERT INTO payroll (employee_id, pay_period_start, pay_period_end, 
                        hours_worked, base_salary, bonuses, net_pay)
    VALUES (emp_id, period_start, period_end, 
            total_hours, base_salary, bonuses, 
            base_salary * (total_hours/160) + bonuses);
END //
DELIMITER ;


## 5. Deployment Instructions

1. Save the SQL scripts to a file (e.g., `bpo_database_setup.sql`)
2. Run the script using MySQL command line:

   mysql -u root -p < bpo_database_setup.sql

3. Verify the database structure:

   mysql -u kabix -p -D bpo_management -e "SHOW TABLES;"


## 6. Backup and Recovery

To create a backup:

mysqldump -u kabix -p bpo_management > bpo_management_backup.sql


To restore from backup:

mysql -u kabix -p bpo_management < bpo_management_backup.sql


This database structure supports all the functionality in your BPO management system with proper relationships,
 indexes for performance, and data integrity constraints. The schema includes timestamps for tracking record creation and updates, 
 which is helpful for auditing.